Dust Engine

Simple 2d game engine.
Parts:
System (engine system and game system)
Graphic (2d visualization routines)
Sound (sound system for playing music\sounds)
Scripting (text scripts for running various game events)
I\O (input\output system for user-game interaction)

Changelog:

--------------------------------------------------------------------------------

v0.0.01:

System:
* Implemented timer (on check returns time relative to timer start)
* Implemented event system: events and event manager, that contains event
  objects and on check function, that executes events' actions and deletes
  them if needed
* Added deMainLoop() function, which will be main function in game engine

Notes:
* There is only one event type for now - event, that executes action after
  it's duration passes (after that event is deleted from the manager)
* Events can be added to manager ONLY after it starts, otherwise they are
  most likely will be completed at first check

--------------------------------------------------------------------------------

v0.0.02:

System:
* Added two new event types: periodical infinite (like simple, but after
  executing and event it starts again) and event canceller (which works like
  simple, but cancels the specied event)
* Added new action type - EVENT_ACTION_NONE
* Events now CAN be added before starting the timer

Notes:
* Event canceller must be added right after the infinite, containing infinite
  event's id in data param
* Periodical event will be runned <canceller duration \ infinite period> times
* There is a little asyncronization in adding periodical events

--------------------------------------------------------------------------------

v0.0.03

System:
* Fixed a bug in event deleting system
* Implemented basic enemy class (graphical vars\methods only)

Graphic:
* Implemented basic gameobject(GO) class
* Implemented basic engine class (initialization, GO manipulation)
* Implemented one drawing method for enemy (for given
  center coordinates, size, angle and color) - debug objects

Notes:
* Clean up event and event manager classes
* Set project type win32 window and remake initialization and mainloop
* Make project timer-based

--------------------------------------------------------------------------------

v0.0.04

System:
* Changed project type to win32
* Timer is now global

Graphic:
* The project no more uses GLUT library

Notes:
* Next step: implementing speed formulae for moving (time interval based)

--------------------------------------------------------------------------------

v0.0.05

System:
* Added projectile system
* Window caption now shows fps and number of projectiles
* Set 64 fps limit (great performance increase)

Notes:
* Next step: text output or smth

--------------------------------------------------------------------------------

v0.0.06

Graphics:
* Added VERY simple text output

Notes:
* Allow user to choose text color and size

--------------------------------------------------------------------------------

v0.0.07

System:
* Fixed some object deleting bug (corrupted heap)
* Esc key now quits the application
* Added keypresses reading (deKeys class)
* Added player, binded its moving on WSAD (player can't go beyond the screen borders)
* Added some methods for basic gameobject class
* Added some kind of weapon - testing purpose only

Graphics:
* Added software cursor

Notes:
* Create class for player weapons
* Implement collision detection

--------------------------------------------------------------------------------

v0.0.08

System:
* Performed some code clean-up
* Added collision detection (detection only, no action for now)
* Added enemies and collisions count to window caption and made it update every frame
* Added small optimization on exit

Graphic:
* Cursor is drawn now after all other objects

--------------------------------------------------------------------------------

v0.0.09

System:
* Added enemy moving type: towards player
* Added weapon and weapon manager classes
* Modifyed collision system to make it more asbtract
* Enemies now have hit points and die
* Implemented basic collision detection on moving (now enemies and player can't go through each other)
* Added player movement correction on collide
* Added event - spawn enemy
* Added simple game over condition and "game over mode"
* Changed working example to a simple game
* Added pause between shots
* Added autofire feature

Graphic:
* Added HP bars

--------------------------------------------------------------------------------

v0.0.10

System:
* Fixed and optimized projectile system (now speed and acceleration apply fair and square)
* Fixed very little bug with player movement on collide
* Rewrote event and event manager classes (applied project coding style)
* Rewrote collision manager into physics manager and moved some move() functions there
* Various code optimizations and cleanup
* Added code comments

--------------------------------------------------------------------------------

v0.0.11

System:
* Rewrote movement collision system for better performance and more simple work
* Added game states
* Added pause and restart
* Added corpses vector in enemy manager

Graphic:
* Fixed bug with new dead enemies drawing below old ones

--------------------------------------------------------------------------------

v0.0.12

System:
* Implemented the 4-elements system
* Fixed a typo: getTagretType() -> getTargetType()

--------------------------------------------------------------------------------

v0.0.13

System:
* Implemented penetrations, projectile deflection, number of projectiles fired
  and waiting time between two shots in weapon system
* Added weapon type: shotgun
* Corrected some values in weapons

I/O:
* Added changing weapons using buttons 1 and 2

--------------------------------------------------------------------------------

v0.1

System:
* Added element changing
* Added weapon type: assault rifle
* Added miniboses and bosses
* At death bosses explode, damaging enemies (not the player) - test stuff

Graphic:
* Added displaying of current and next element types
* Dead enemies are now have duller color that living ones

I/O:
* Added RMB press support (element changing binded on it for now)

MILESTONE: First fully playable version.
